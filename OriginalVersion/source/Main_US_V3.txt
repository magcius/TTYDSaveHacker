# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright 2020 Linus S. (aka PistonMiner)

# Modifications made by Zephiles

# Set global function/variable/offset locations/values
.set LOADER_SIZE,(__end - __start)
.set LOADER_ARENA_LOCATION,0x80F00000
.set LOADER_LOWMEM_LOCATION,0x80004888

.set ARENA_LO_OFFSET,0x1510
.set ARENA_HI_OFFSET,0x2160
.set SAVE_REGION_START_OFFSET,0x2198
.set SAVE_REGION_END_OFFSET,0x219C

.set MAIN_HEAP_SIZE_HOOK_ADDRESS,0x80030288
.set PAYLOAD_HOOK_LOCATION,0x800055E0

.set gcResetCheck,0x8006EDBC
.set __OSReboot,0x8029B074
.set Run_main,0x80298048
.set Run_restart,0x81303BB4

.set memmove,0x80269D0C

.set REL_TOTAL_USED_SIZE_ADDRESS,0x80004148
.set memset,0x800050B4
.set OSAllocFromArenaLo,0x80296754
.set Link,0x8029A604
.set OSUnlink,0x8029AB40
.set CARDInit,0x802AC53C
.set CARDCheckAsync,0x802AF468
.set CARDProbeEx,0x802AF594
.set CARDMountAsync,0x802AFC9C
.set CARDUnmount,0x802AFED8
.set CARDOpen,0x802B0BDC
.set CARDClose,0x802B0CF8
.set CARDReadAsync,0x802B138C
.set __CARDBlock,0x80413B80

__start:
# If the first instruction of __OSReboot has been modified, then reboot without
# hooking to effectively unload the REL
lis r3,__OSReboot@h
ori r3,r3,__OSReboot@l
lis r4,0x7C08
ori r4,r4,0x02A6 # mflr r0
lwz r5,0(r3)
cmpw r5,r4
bne- unloadRelAndReboot

# Hook __OSReboot
bl main_pic

main_pic:
# r3 already contains __OSReboot
mflr r4
addi r4,r4,(__OSReboot_hook - main_pic)
bl writeBranch

beginRebootProcess:
# Begin reset
# gpGlobals->softResetType = 1
lwz r3,-0x6F50(r13)
li r4,1
stw r4,0x1278(r3)

# Call gcResetCheck without returning
lis r3,gcResetCheck@h
ori r3,r3,gcResetCheck@l
mtctr r3
bctr

unloadRelAndReboot:
# Reset the first instruction of __OSReboot to its original value
stw r4,0(r3)
bl makeCodeChangesVisibleSingleInstruction
b beginRebootProcess

# Runs out of initial location. Relocates to arena location, sets saved region
# and patches Run in game binary.
__OSReboot_hook:
stwu sp,-0x20(sp)
mflr r0
stw r0,0x24(sp)
stmw r28,0x8(sp)

# Save arguments for original function
mr r30,r3
mr r31,r4

# Initialize static values used for addresses
lis r29,LOADER_ARENA_LOCATION@h
lis r28,Run_main@h

# Relocate into arena memory
mr r3,r29 # LOADER_ARENA_LOCATION
bl __OSReboot_hook_pic

__OSReboot_hook_pic:
mflr r4
addi r4,r4,(__start - __OSReboot_hook_pic)
li r5,LOADER_SIZE
lis r12,memmove@h
ori r12,r12,memmove@l
mtlr r12
blrl

mr r3,r29 # LOADER_ARENA_LOCATION
li r4,LOADER_SIZE
bl makeCodeChangesVisible

# Set the saved region start and end
stw r29,SAVE_REGION_START_OFFSET(r13)
addi r3,r29,LOADER_SIZE
stw r3,SAVE_REGION_END_OFFSET(r13)

# Set up Run hook in main binary
ori r3,r28,Run_main@l
ori r4,r29,(LOADER_ARENA_LOCATION + (Run_main_hook - __start))@l
bl writeBranch

# Back into __OSReboot
ori r12,r28,(__OSReboot + 4)@l
mtctr r12

# Restore arguments for original function
mr r3,r30
mr r4,r31

lmw r28,0x8(sp)
lwz r0,0x24(sp)
mtlr r0
addi sp,sp,0x20
bctr

# Runs out of arena location. Called when restart binary is about to be
# executed. Patch restart binary.
Run_main_hook:
# This is just before loading a new DOL which will reset everything, so we
# don't need to worry about preserving register contents

# Save entrypoint
mr r31,r3

# Set up Run hook in restart DOL
lis r3,Run_restart@h
ori r3,r3, Run_restart@l
lis r4,(LOADER_ARENA_LOCATION + (Run_restart_hook - __start))@h
ori r4,r4,(LOADER_ARENA_LOCATION + (Run_restart_hook - __start))@l
bl writeBranch

# Restore entrypoint
mr r3,r31

# Back into Run
b ((Run_main + 4) - LOADER_ARENA_LOCATION + __start)

# Runs out of arena location. Called when game binary is about to be executed.
# Relocates to low memory and patches reloaded game DOL.
Run_restart_hook:
# This is just before loading a new DOL which will reset everything, so we
# don't need to worry about preserving register contents

# Save entrypoint
mr r31,r3

# Relocate to low memory
lis r30,LOADER_LOWMEM_LOCATION@h
ori r3,r30,LOADER_LOWMEM_LOCATION@l
lis r4,LOADER_ARENA_LOCATION@h
li r5,LOADER_SIZE
bl (memmove - LOADER_ARENA_LOCATION + __start)

ori r3,r30,LOADER_LOWMEM_LOCATION@l
li r4,LOADER_SIZE
bl makeCodeChangesVisible

# Place hook for adjusting main heap size
lis r3,MAIN_HEAP_SIZE_HOOK_ADDRESS@h
ori r3,r3,MAIN_HEAP_SIZE_HOOK_ADDRESS@l
ori r4,r30,(LOADER_LOWMEM_LOCATION + (gResizeMainHeap - __start))@l
bl writeBranch

# Place hook for payload
ori r3,r30,PAYLOAD_HOOK_LOCATION@l
ori r4,r30,(LOADER_LOWMEM_LOCATION + (gPayload - __start))@l
bl writeBranch

# Place restart hook
lis r3,__OSReboot@h
ori r3,r3,__OSReboot@l
lis r4,(LOADER_LOWMEM_LOCATION + (__OSReboot_hook - __start))@h
ori r4,r4,(LOADER_LOWMEM_LOCATION + (__OSReboot_hook - __start))@l
bl writeBranch

# Restore entrypoint
mr r3,r31

# Back into Run
b ((Run_restart + 4) - LOADER_ARENA_LOCATION + __start)

writeBranch:
# Write instruction
subf r4,r3,r4
rlwinm r4,r4,0,6,29
lis r5,0x4800
or r5,r5,r4
stw r5,0(r3)

# Make visible, tailcall
makeCodeChangesVisibleSingleInstruction:
li r4,4

makeCodeChangesVisible:
# Make sure the size is valid
cmplwi r4,0
blelr-

# Get the loop count
rlwinm r5,r3,0,27,31
add r4,r4,r5
addi r4,r4,31
rlwinm r4,r4,27,5,31
mtctr r4

makeCodeChangesVisibleLoopStart:
# Flush the data cache and invalidate the instruction cache
dcbf r0,r3
icbi r0,r3
addi r3,r3,32
bdnz+ makeCodeChangesVisibleLoopStart

# Done, so sync the caches and exit
sync
isync
blr

gResizeMainHeap:
# The current size is in r6, so subtract the REL's used size from it
lis r8,REL_TOTAL_USED_SIZE_ADDRESS@ha
lwz r8,REL_TOTAL_USED_SIZE_ADDRESS@l(r8)
sub r6,r6,r8

# Restore the overwritten instruction
add r0,r3,r6

# Go back to the main function
b ((MAIN_HEAP_SIZE_HOOK_ADDRESS + 4) - LOADER_LOWMEM_LOCATION + __start)

gPayload:
# Original REL Loader code with some modifications
# Code created by PistonMiner and Zephiles

# Push stack
stwu sp,-0x50(sp)
mflr r0
stw r0,0x54(sp)
stmw r22,0x28(sp)

# Backup function parameters
stw r3,0x8(sp)
stw r4,0xC(sp)

# Clear the temporary memory used by the loader
lis r3,LOADER_ARENA_LOCATION@h
li r4,0
li r5,LOADER_SIZE
bl (memset - LOADER_LOWMEM_LOCATION + __start)

# Make sure no possible cache issues occur from this memory being reused later on
# r3 already contains LOADER_ARENA_LOCATION
li r4,LOADER_SIZE
bl makeCodeChangesVisible

# Make a backup of the arenas
lwz r31,ARENA_LO_OFFSET(r13)
lwz r30,ARENA_HI_OFFSET(r13)

# Initialize static values used for addresses
lis r29,0x8000
li r28,0 # Used to check if a REL file is loaded or not

# Initialize the value at REL_TOTAL_USED_SIZE_ADDRESS to 0, as the REL
# may modify it later before this loader adjusts it
stw r28,REL_TOTAL_USED_SIZE_ADDRESS@l(r29)

# Initialize memory card stuff
bl (CARDInit - LOADER_LOWMEM_LOCATION + __start)

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r27,0x000F
ori r27,r27,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
li r3,0 # Memory Card Slot A
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
bl (CARDProbeEx - LOADER_LOWMEM_LOCATION + __start)
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r27,r27,1
bgt+ checkForMemoryCardLoop

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Allocate memory for the Work Area
# Allocate from Arena Hi
ori r3,r28,0xA000 # Work Area size
li r4,-0x20 # Align to 0x20 to be safe
and r5,r30,r4
subf r5,r3,r5
and r4,r5,r4
stw r4,ARENA_HI_OFFSET(r13)

# Mount the Memory Card
li r3,0 # Memory Card Slot A
# r4 already contains the pointer to the Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
li r6,0 # Attach Callback function (Want to avoid using, so NULL)
bl (CARDMountAsync - LOADER_LOWMEM_LOCATION + __start)
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Ready
beq+ checkForErrors
cmpwi r3,-6 # Broken
beq- checkForErrors
b freeWorkArea

checkForErrors:
# Check for and attempt to repair memory card errors
li r3,0 # Memory Card Slot A
li r4,0 # Callback function (Want to avoid using, so NULL)
bl (CARDCheckAsync - LOADER_LOWMEM_LOCATION + __start)
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
bne- freeWorkArea

# Set up CardFileInfo on the stack
addi r27,sp,0x14

# Open the file
li r3,0 # Memory Card Slot A
ori r4,r29,(LOADER_LOWMEM_LOCATION + internalFilenameString)@l
mr r5,r27 # Pointer to CardFileInfo
bl (CARDOpen - LOADER_LOWMEM_LOCATION + __start)
cmpwi r3,0 # Check if something went wrong
bne- unmountMemoryCard

# Allocate 0x400 bytes of memory, as the read size must be in multiples of 0x200 bytes,
# and the BSS Area size, the fixed REL size, and the BSS Align are needed later
li r3,0x400 # Bytes to allocate
li r4,0x20 # The buffer used by CARDRead must be aligned to 0x20 bytes
bl (OSAllocFromArenaLo - LOADER_LOWMEM_LOCATION + __start)

# Backup the returned address to be used for later
mr r25,r3

# Read from the Card
mr r3,r27 # Pointer to CardFileInfo
mr r4,r25 # Pointer to the File Buffer
li r5,0x400 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
bl (CARDReadAsync - LOADER_LOWMEM_LOCATION + __start)
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
li r5,0x400 # Size used
bne- freeCurrentMemoryArea

# Get the File Size, as it will be used later
lwz r6,0x40(r25) # File Size

# Adjust the File Size to be in multiples of 0x200 bytes
addi r26,r6,511
rlwinm r26,r26,0,0,22

# Increase the fixed REL size to account for the BSS's alignment requirement
lwz r24,0x248(r25) # fixSize; 0x200 + 0x48
lwz r3,0x244(r25) # bssAlign; 0x200 + 0x44
divwu r0,r24,r3
mullw r0,r0,r3
sub. r0,r24,r0
beq+ fixedRelSizeAligned

# Align the fixed REL size
mr r4,r24
neg r5,r3
and r5,r24,r5
add r24,r5,r3 # fixSize

# Get the difference between the new size and the old size
sub r4,r24,r4

# Add the difference to the File Size to account for the increased size
add r6,r6,r4

fixedRelSizeAligned:
# Add the BSS Area size to the File Size
lwz r22,0x220(r25) # BSS Area size; 0x200 + 0x20
add r23,r6,r22

# If the File Size + the BSS Area Size is less than the adjusted File Size,
# then use the adjusted File Size as the size for the allocated memory
cmplw r23,r26
bge+ fileSizeIsValid
mr r23,r26

fileSizeIsValid:
# Restore the original arena lo address, effectively freeing the 0x400 bytes from earlier
stw r31,ARENA_LO_OFFSET(r13)

# Allocate memory for the File and BSS
mr r3,r23 # File Size + BSS Area Size
li r4,0x20 # REL files require an alignment of 0x20
bl (OSAllocFromArenaLo - LOADER_LOWMEM_LOCATION + __start)

# Backup the returned address to be used for later
mr r25,r3

# Make sure no possible cache issues occur from reusing this memory
# r3 already contains the pointer to the File Buffer
li r4,0x400 # Should only matter for the first 0x400 bytes that were used before
bl makeCodeChangesVisible

# Read the REL Area of the file
mr r3,r27 # Pointer to CardFileInfo
mr r4,r25 # Pointer to the File Buffer
mr r5,r26 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
bl (CARDReadAsync - LOADER_LOWMEM_LOCATION + __start)
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
mr r5,r26 # Size used
bne- freeCurrentMemoryArea

# Get the address of the BSS Area
add r26,r25,r24

# Link the functions in the REL
mr r3,r25 # Pointer to the Module
mr r4,r26 # Pointer to the BSS Area
li r5,1 # True
bl (Link - LOADER_LOWMEM_LOCATION + __start)
cmpwi r3,1 # Check if something went wrong
bne- unlinkRel

# Add the BSS Area Size to the adjusted fixed REL size
add r3,r24,r22

# Add the size to the original arena lo, effectively resizing the allocated
# memory to remove the space used by the unnecessary relocation data
add r3,r31,r3
stw r3,ARENA_LO_OFFSET(r13)

# Make sure the rest of the arena is cleared to insure no issues occur
# from some memory potentially being uninitialized
# r3 already contains the start of the arena
li r4,0
sub r5,r23,r24 # Has the extra size from the BSS Area size, but this shouldn't cause any issues
bl (memset - LOADER_LOWMEM_LOCATION + __start)

# Make sure no possible cache issues occur from this memory being reused later on
# r3 already contains the start of the arena
sub r4,r23,r24 # Has the extra size from the BSS Area size, but this shouldn't cause any issues
bl makeCodeChangesVisible

# Store the BSS Area and the Module
stw r26,0x414C(r29) # Pointer to the BSS Area
stw r25,0x4150(r29) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r28,0x34(r25)

# Done, so close and unmount the card
b closeCard

finishAsyncMemoryCardFunc:
cmpwi r3,0 # Check if something went wrong
bnelr-

# Assume we're using Memory Card Slot A
lis r4,__CARDBlock@ha

finishAsyncMemoryCardFuncLoop:
lwz r3,__CARDBlock@l + 0x4(r4)
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncMemoryCardFuncLoop
blr

unlinkRel:
mr r3,r25 # Pointer to the Module
bl (OSUnlink - LOADER_LOWMEM_LOCATION + __start)
mr r5,r23 # Size used

freeCurrentMemoryArea:
# Make a backup of the size to use for later
mr r26,r5 # Size used

# Clear the memory used by the REL to insure no issues occur from some
# memory potentially being uninitialized
mr r3,r25 # Pointer to the File Buffer or the 0x400 Bytes Buffer
li r4,0
# r5 already contains the size
bl (memset - LOADER_LOWMEM_LOCATION + __start)

# Make sure no possible cache issues occur from this memory being reused later on
# r3 already contains the pointer the File Buffer or the 0x400 Bytes Buffer
mr r4,r26 # Size used
bl makeCodeChangesVisible

# Restore the original arena lo address, effectively freeing the current memory area
stw r31,ARENA_LO_OFFSET(r13)

closeCard:
mr r3,r27 # Pointer to CardFileInfo
bl (CARDClose - LOADER_LOWMEM_LOCATION + __start)

unmountMemoryCard:
li r3,0 # Memory Card Slot A
bl (CARDUnmount - LOADER_LOWMEM_LOCATION + __start)

freeWorkArea:
# Clear the memory used by the Work Area to insure no issues occur from some memory
# potentially being uninitialized
lwz r3,ARENA_HI_OFFSET(r13)
li r4,0
ori r5,r4,0xA000 # Work Area size
bl (memset - LOADER_LOWMEM_LOCATION + __start)

# Make sure no possible cache issues occur from this memory being reused later on
# r3 already contains the Arena Hi address
li r4,0
ori r4,r4,0xA000 # Work Area size
bl makeCodeChangesVisible

# Restore the original Arena Hi address, effectively freeing the Work Area
stw r30,ARENA_HI_OFFSET(r13)

# Run the REL Prolog if the load was successful
cmpwi r28,0
beq- exit
mtlr r28
blrl

exit:
# Calculate how much memory is used by the REL, and store the result
lwz r3,ARENA_LO_OFFSET(r13)
sub r3,r3,r31

# Adjust the new size to be in multiples of 0x20 bytes
addi r3,r3,31
rlwinm r3,r3,0,0,26

# Add the new size to the current size
lwz r4,REL_TOTAL_USED_SIZE_ADDRESS@l(r29)
add r3,r4,r3
stw r3,REL_TOTAL_USED_SIZE_ADDRESS@l(r29)

# Restore function parameters
lwz r3,0x8(sp)
lwz r4,0xC(sp)

# Pop stack
lmw r22,0x28(sp)
lwz r0,0x54(sp)
mtlr r0
addi sp,sp,0x50

# Add back in the overwritten instruction
stwu sp,-0x10(sp)

# Go back to the main function
b ((PAYLOAD_HOOK_LOCATION + 4) - LOADER_LOWMEM_LOCATION + __start)

internalFilenameString:
.asciz "rel"

__end: